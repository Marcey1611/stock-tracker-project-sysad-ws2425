@startuml

package api {
    package boundary {
        +class Api {
            +api_bf : ApiBf
            +api_router : apiRouter
            +validator : validator

            +send_update_mail(request : Request) : JSONResponse
            +send_error_mail(request : Request) : JSONResponse
        }

        +class ExceptionHandler {
            +logger : logger

            +register_exception_handler(fast_api : app) : JSONResponse
            +response(detail : str, status_code : int) : JSONResponse
        }
    }

    package control {
        +class ApiBf {
            - logger: Logger

            +__init__() : None
            +prepare_mailing_data(valid_data : Request, action : Action) : None
            +prepare_mailing_data_error(valid_data : Request) : None
        }
    }

    package validation {
        +class Validator {
            - logger: Logger

            + __init__() : None
            + validate_data(product_list : list<dict<str, int | str>>) : list<dict<str, int | str>>
            + validate_error_message(request_data : list<dict<str, int | str>>) : list<dict<str, int | str>>
        }
    }
}

package bm {
    +class MailPreparingServiceBa {
        - logger : Logger
        - sender_email : str
        - receiver_email : str

        + __init__() : None
        + prepare_mail(mail_data_list : list<MailData>, action : Action) : None
        + set_mail_data(mail_data_list : list<MailData>, action : Action) : str, str
        + set_error_mail_data(error_message : str) : str, str
        + config_message(subject : str, body : str) : MIMEMultipart
    }
    +class MailSendingServiceBa {
        - logger : Logger
        - smtp_server : str
        - smtp_port : int
        - sender_email : str
        - receiver_email : str
        - password : str

        + __init__() : None
        + send_mail(message : MIMEMultipart) : None
    }
}

package entity {
    +class MailData {
        + product_id : int
        + product_name : str
        + product_amount_changed : int
        + product_amount_total : int
        + action : Action
    }

    +enum Action {
        ADDED
        DELETED
        ERROR
    }

    +class InternalErrorException {
        + __init__(detail : str = "Internal Server Error", status_code : int = 500) : None
    }

    +class BadRequestException {
        +__init__(detail : str = "Bad Request", status_code : int = 400) : None
    }
}

+class Main {
    +app : fast_api
}

Main ..> ExceptionHandler
Main ..> Api

Api ..> Validator
Api ..> ApiBf
Api ..> Action

ApiBf ..> MailData
ApiBf ..> MailPreparingServiceBa
ApiBf ..> InternalErrorException
ApiBf ..> Action

Validator ..> BadRequestException

MailPreparingServiceBa ..> MailSendingServiceBa
MailPreparingServiceBa ..> Action
MailPreparingServiceBa ..> InternalErrorException
MailPreparingServiceBa ..> MailData

MailSendingServiceBa ..> Action
MailSendingServiceBa ..> InternalErrorException
MailSendingServiceBa ..> MailData

@enduml
